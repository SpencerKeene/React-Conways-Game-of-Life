{"version":3,"sources":["components/Toolbar.js","helpers/GameOfLife.js","components/Canvas.js","components/Gameboard.js","components/IntroModal.js","App.js","reportWebVitals.js","index.js"],"names":["Toolbar","togglePlaying","isPlaying","cellSize","setCellSize","playSpeed","setPlaySpeed","generation","randomizeBoard","clearBoard","className","onClick","id","class","type","min","max","value","onChange","e","parseInt","target","advance","liveCells","neighbourCounts","newLiveCells","Set","newNeighbourCounts","Map","forEach","cell","get","addLiveCell","neighbours","has","randomize","startX","startY","endX","endY","i","j","Math","random","coord","x","y","parseCoord","cellCoord","match","map","v","add","incrementNeighbours","deleteLiveCell","delete","decrementNeighbours","prevCount","set","Canvas","positionX","setPositionX","positionY","setPositionY","setLiveCells","setNeighbourCounts","canvasRef","useRef","useState","isMoving","setIsMoving","isDrawing","setIsDrawing","drawMode","setDrawMode","renderBoard","useCallback","canvas","current","offscreen","OffscreenCanvas","width","height","octx","getContext","totalSize","floor","fillStyle","GOL","fillRect","btm","transferToImageBitmap","transferFromImageBitmap","useEffect","window","innerWidth","innerHeight","style","backgroundColor","frameRef","cancelAnimationFrame","requestAnimationFrame","drawCell","clientX","clientY","cellX","cellY","shiftHandler","shiftKey","startDrawing","stopDrawing","document","getElementById","setAttribute","removeAttribute","mouseButtonHandler","buttons","ref","onMouseDown","onMouseUp","onMouseEnter","focus","onMouseOut","onMouseMove","movementX","movementY","move","onKeyDown","onKeyUp","onWheel","deltaY","tabIndex","Gameboard","setGeneration","setIsPlaying","playTimeoutRef","advanceGame","newCells","newCounts","prevGen","clearTimeout","setTimeout","maxWidth","maxHeight","start","end","IntroModal","display","href","rel","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.fcd1dd62.chunk.js","sourcesContent":["const Toolbar = ({\r\n  togglePlaying,\r\n  isPlaying,\r\n  cellSize,\r\n  setCellSize,\r\n  playSpeed,\r\n  setPlaySpeed,\r\n  generation,\r\n  randomizeBoard,\r\n  clearBoard,\r\n}) => {\r\n  return (\r\n    <div className=\"Toolbar\">\r\n      {/* <button onClick={randomizeCells}>Randomize</button> */}\r\n      <div className=\"playAligner\">\r\n        <button className=\"playButton\" onClick={togglePlaying}>\r\n          {isPlaying ? \"Pause\" : \"Play\"}\r\n        </button>\r\n        <div id=\"generation\">Generation: {generation}</div>\r\n      </div>\r\n      <div className=\"slidersAligner\">\r\n        <div class=\"slidecontainer\" id=\"cellSizeSliderContainer\">\r\n          Cell Size: {cellSize}\r\n          <form>\r\n            <input\r\n              type=\"range\"\r\n              min=\"8\"\r\n              max=\"80\"\r\n              value={cellSize}\r\n              class=\"slider\"\r\n              id=\"cellSizeSlider\"\r\n              onChange={(e) => {\r\n                setCellSize(parseInt(e.target.value));\r\n              }}\r\n            />\r\n          </form>\r\n        </div>\r\n        <div class=\"slidecontainer\" id=\"playSpeedSliderContainer\">\r\n          Speed: {playSpeed}\r\n          <form>\r\n            <input\r\n              type=\"range\"\r\n              min=\"1\"\r\n              max=\"100\"\r\n              value={playSpeed}\r\n              class=\"slider\"\r\n              id=\"playSpeedSlider\"\r\n              onChange={(e) => {\r\n                setPlaySpeed(parseInt(e.target.value));\r\n              }}\r\n            />\r\n          </form>\r\n        </div>\r\n      </div>\r\n      <div className=\"buttonsAligner\">\r\n        <button className=\"randomizeButton\" onClick={randomizeBoard}>\r\n          Randomize\r\n        </button>\r\n        <button className=\"clearButton\" onClick={clearBoard}>\r\n          Clear\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Toolbar;\r\n","export const advance = (liveCells, neighbourCounts) => {\r\n  const newLiveCells = new Set();\r\n  const newNeighbourCounts = new Map();\r\n\r\n  liveCells.forEach((cell) => {\r\n    if (neighbourCounts.get(cell) === 2 || neighbourCounts.get(cell) === 3) {\r\n      addLiveCell(newLiveCells, newNeighbourCounts, cell);\r\n    }\r\n  });\r\n  neighbourCounts.forEach((neighbours, cell) => {\r\n    if (!liveCells.has(cell) && neighbours === 3) {\r\n      addLiveCell(newLiveCells, newNeighbourCounts, cell);\r\n    }\r\n  });\r\n\r\n  return [newLiveCells, newNeighbourCounts];\r\n};\r\n\r\nexport const randomize = (startX, startY, endX, endY) => {\r\n  const liveCells = new Set();\r\n  const neighbourCounts = new Map();\r\n\r\n  for (let i = startX; i < endX; i++) {\r\n    for (let j = startY; j < endY; j++) {\r\n      if (Math.random() < 1 / 3) {\r\n        addLiveCell(liveCells, neighbourCounts, coord(i, j));\r\n      }\r\n    }\r\n  }\r\n\r\n  return [liveCells, neighbourCounts];\r\n};\r\n\r\nexport const coord = (x, y) => {\r\n  return x + \",\" + y;\r\n};\r\n\r\nexport const parseCoord = (cellCoord) => {\r\n  return cellCoord.match(/-?\\d+/g).map((v) => parseInt(v));\r\n};\r\n\r\nexport const addLiveCell = (liveCells, neighbourCounts, cellCoord) => {\r\n  if (liveCells.has(cellCoord)) return;\r\n\r\n  liveCells.add(cellCoord);\r\n  incrementNeighbours(neighbourCounts, cellCoord);\r\n};\r\n\r\nexport const deleteLiveCell = (liveCells, neighbourCounts, cellCoord) => {\r\n  if (!liveCells.has(cellCoord)) return;\r\n\r\n  liveCells.delete(cellCoord);\r\n  decrementNeighbours(neighbourCounts, cellCoord);\r\n};\r\n\r\nconst incrementNeighbours = (neighbourCounts, cellCoord) => {\r\n  const [x, y] = parseCoord(cellCoord);\r\n\r\n  for (let i = -1; i <= 1; i++) {\r\n    for (let j = -1; j <= 1; j++) {\r\n      if (i === 0 && j === 0) continue;\r\n\r\n      const cellCoord = coord(x + i, y + j);\r\n      const prevCount = neighbourCounts.get(cellCoord);\r\n      neighbourCounts.set(cellCoord, (prevCount | 0) + 1);\r\n    }\r\n  }\r\n};\r\n\r\nconst decrementNeighbours = (neighbourCounts, cellCoord) => {\r\n  const [x, y] = parseCoord(cellCoord);\r\n\r\n  for (let i = -1; i <= 1; i++) {\r\n    for (let j = -1; j <= 1; j++) {\r\n      if (i === 0 && j === 0) continue;\r\n\r\n      const cellCoord = coord(x + i, y + j);\r\n      const prevCount = neighbourCounts.get(cellCoord);\r\n\r\n      if (prevCount) {\r\n        if (prevCount === 1) neighbourCounts.delete(cellCoord);\r\n        neighbourCounts.set(cellCoord, prevCount - 1);\r\n      }\r\n    }\r\n  }\r\n};\r\n","import { useCallback, useRef, useState, useEffect } from \"react\";\r\nimport * as GOL from \"../helpers/GameOfLife.js\";\r\n\r\nconst Canvas = ({\r\n  positionX,\r\n  setPositionX,\r\n  positionY,\r\n  setPositionY,\r\n  cellSize,\r\n  setCellSize,\r\n  liveCells,\r\n  setLiveCells,\r\n  neighbourCounts,\r\n  setNeighbourCounts,\r\n}) => {\r\n  const canvasRef = useRef();\r\n\r\n  const [isMoving, setIsMoving] = useState(false);\r\n  const [isDrawing, setIsDrawing] = useState(false);\r\n  const [drawMode, setDrawMode] = useState(\"\");\r\n\r\n  const renderBoard = useCallback(() => {\r\n    const canvas = canvasRef.current;\r\n    if (!canvas) return;\r\n\r\n    const offscreen = new OffscreenCanvas(canvas.width, canvas.height);\r\n    const octx = offscreen.getContext(\"2d\");\r\n\r\n    let totalSize = Math.max(Math.floor(cellSize * 1.1), cellSize + 1);\r\n\r\n    let startX = -((positionX % totalSize) + (positionX < 0 ? totalSize : 0));\r\n    let startY = -((positionY % totalSize) + (positionY < 0 ? totalSize : 0));\r\n\r\n    for (let i = startX; i < offscreen.width; i += totalSize) {\r\n      for (let j = startY; j < offscreen.height; j += totalSize) {\r\n        const x = (positionX + i) / totalSize;\r\n        const y = (positionY + j) / totalSize;\r\n        octx.fillStyle = liveCells.has(GOL.coord(x, y)) ? \"black\" : \"lightblue\";\r\n        octx.fillRect(i, j, cellSize, cellSize);\r\n      }\r\n    }\r\n\r\n    const btm = offscreen.transferToImageBitmap();\r\n    const ctx = canvas.getContext(\"bitmaprenderer\");\r\n    ctx.transferFromImageBitmap(btm);\r\n  }, [cellSize, liveCells, positionX, positionY]);\r\n\r\n  const startMoving = (e) => {\r\n    if (isDrawing) return;\r\n    setIsMoving(true);\r\n  };\r\n\r\n  const stopMoving = () => {\r\n    setIsMoving(false);\r\n  };\r\n\r\n  const move = (e) => {\r\n    if (!isMoving) return;\r\n    setPositionX(positionX - e.movementX);\r\n    setPositionY(positionY - e.movementY);\r\n  };\r\n\r\n  useEffect(() => {\r\n    const canvas = canvasRef.current;\r\n    canvas.width = window.innerWidth;\r\n    canvas.height = window.innerHeight - 100;\r\n    canvas.style.backgroundColor = \"grey\";\r\n  }, []);\r\n\r\n  // useAnimationFrame(renderBoard);\r\n  const frameRef = useRef();\r\n  cancelAnimationFrame(frameRef.current);\r\n  frameRef.current = requestAnimationFrame(renderBoard);\r\n\r\n  const drawCell = (e) => {\r\n    if (!isDrawing) return;\r\n\r\n    let x = e.clientX;\r\n    let y = e.clientY;\r\n\r\n    let totalSize = Math.max(Math.floor(cellSize * 1.1), cellSize + 1);\r\n\r\n    let cellX = Math.floor((positionX + x) / totalSize);\r\n    let cellY = Math.floor((positionY + y) / totalSize);\r\n    let cellCoord = GOL.coord(cellX, cellY);\r\n\r\n    const newLiveCells = new Set(liveCells);\r\n    const newNeighbourCounts = new Map(neighbourCounts);\r\n\r\n    if (drawMode === \"add\") {\r\n      GOL.addLiveCell(newLiveCells, newNeighbourCounts, cellCoord);\r\n    } else if (drawMode === \"delete\") {\r\n      GOL.deleteLiveCell(newLiveCells, newNeighbourCounts, cellCoord);\r\n    } else {\r\n      if (liveCells.has(cellCoord)) {\r\n        GOL.deleteLiveCell(newLiveCells, newNeighbourCounts, cellCoord);\r\n        setDrawMode(\"delete\");\r\n      } else {\r\n        GOL.addLiveCell(newLiveCells, newNeighbourCounts, cellCoord);\r\n        setDrawMode(\"add\");\r\n      }\r\n    }\r\n\r\n    setLiveCells(newLiveCells);\r\n    setNeighbourCounts(newNeighbourCounts);\r\n  };\r\n\r\n  const shiftHandler = (e) => {\r\n    if (e.shiftKey && !isDrawing) startDrawing();\r\n    else if (!e.shiftKey) stopDrawing();\r\n  };\r\n\r\n  const startDrawing = () => {\r\n    setIsDrawing(true);\r\n    document.getElementById(\"gameboardCanvas\").setAttribute(\"drawing\", \"\"); // ---- issue 1 solution\r\n  };\r\n\r\n  const stopDrawing = () => {\r\n    setIsDrawing(false);\r\n    document.getElementById(\"gameboardCanvas\").removeAttribute(\"drawing\"); // ---- issue 1 solution\r\n  };\r\n\r\n  const mouseButtonHandler = (e) => {\r\n    // if left mouse button is down\r\n    if (e.buttons === 1) {\r\n      if (isDrawing) drawCell(e);\r\n      else if (!isMoving) startMoving();\r\n    } else {\r\n      if (isMoving) stopMoving();\r\n      if (isDrawing) setDrawMode(\"\");\r\n    }\r\n  };\r\n\r\n  const mouseMoveHandler = (e) => {\r\n    if (isDrawing && e.buttons === 1) drawCell(e);\r\n    else move(e);\r\n  };\r\n\r\n  const wheelHandler = (e) => {\r\n    if (e.deltaY > 0) setCellSize(Math.max(8, cellSize - 4));\r\n    else setCellSize(Math.min(80, cellSize + 4));\r\n  };\r\n\r\n  return (\r\n    <canvas\r\n      id=\"gameboardCanvas\"\r\n      ref={canvasRef}\r\n      onMouseDown={mouseButtonHandler}\r\n      onMouseUp={mouseButtonHandler}\r\n      onMouseEnter={(e) => {\r\n        mouseButtonHandler(e);\r\n        document.getElementById(\"gameboardCanvas\").focus();\r\n      }}\r\n      onMouseOut={mouseButtonHandler}\r\n      onMouseMove={mouseMoveHandler}\r\n      onKeyDown={shiftHandler}\r\n      onKeyUp={shiftHandler}\r\n      onWheel={wheelHandler}\r\n      // drawing={isDrawing}   ---- issue 1: code not working for some unkown reason\r\n      tabIndex={0}\r\n    ></canvas>\r\n  );\r\n};\r\n\r\nexport default Canvas;\r\n","import { useCallback, useEffect, useRef, useState } from \"react\";\r\nimport Toolbar from \"./Toolbar\";\r\nimport Canvas from \"./Canvas\";\r\nimport * as GOL from \"../helpers/GameOfLife.js\";\r\n\r\nconst Gameboard = () => {\r\n  const [generation, setGeneration] = useState(0);\r\n  const [liveCells, setLiveCells] = useState(new Set());\r\n  const [neighbourCounts, setNeighbourCounts] = useState(new Map());\r\n  // add initial layout\r\n\r\n  const [cellSize, setCellSize] = useState(30);\r\n  const [playSpeed, setPlaySpeed] = useState(80);\r\n  const [isPlaying, setIsPlaying] = useState(false);\r\n  const playTimeoutRef = useRef();\r\n\r\n  const [positionX, setPositionX] = useState(0);\r\n  const [positionY, setPositionY] = useState(0);\r\n\r\n  const advanceGame = useCallback(() => {\r\n    // console.log(\"advancing\");\r\n    const [newCells, newCounts] = GOL.advance(liveCells, neighbourCounts);\r\n    setLiveCells(newCells);\r\n    setNeighbourCounts(newCounts);\r\n    setGeneration((prevGen) => prevGen + 1);\r\n  }, [liveCells, neighbourCounts]);\r\n\r\n  const togglePlaying = () => {\r\n    setIsPlaying(!isPlaying);\r\n  };\r\n\r\n  const playHandler = () => {\r\n    clearTimeout(playTimeoutRef.current);\r\n    if (isPlaying) {\r\n      playTimeoutRef.current = setTimeout(advanceGame, 1000 - playSpeed * 10);\r\n    }\r\n  };\r\n\r\n  const clearBoard = () => {\r\n    setIsPlaying(false);\r\n    clearTimeout(playTimeoutRef.current);\r\n\r\n    setPositionX(0);\r\n    setPositionY(0);\r\n\r\n    setLiveCells(new Set());\r\n    setNeighbourCounts(new Map());\r\n    setGeneration(0);\r\n  };\r\n\r\n  const randomizeBoard = () => {\r\n    clearBoard();\r\n\r\n    let maxWidth = window.innerWidth / cellSize;\r\n    let maxHeight = window.innerHeight / cellSize;\r\n\r\n    const start = [Math.floor(maxWidth * 0.05), Math.floor(maxHeight * 0.1)];\r\n    const end = [Math.floor(maxWidth * 0.83), Math.floor(maxHeight * 0.72)];\r\n    const [newCells, newCounts] = GOL.randomize(...start, ...end);\r\n    setLiveCells(newCells);\r\n    setNeighbourCounts(newCounts);\r\n  };\r\n\r\n  useEffect(() => {\r\n    clearBoard();\r\n  }, []);\r\n\r\n  useEffect(playHandler, [advanceGame, isPlaying, playSpeed]);\r\n\r\n  return (\r\n    <div className=\"Gameboard\">\r\n      <Canvas\r\n        positionX={positionX}\r\n        setPositionX={setPositionX}\r\n        positionY={positionY}\r\n        setPositionY={setPositionY}\r\n        cellSize={cellSize}\r\n        setCellSize={setCellSize}\r\n        liveCells={liveCells}\r\n        setLiveCells={setLiveCells}\r\n        neighbourCounts={neighbourCounts}\r\n        setNeighbourCounts={setNeighbourCounts}\r\n      />\r\n      <Toolbar\r\n        isPlaying={isPlaying}\r\n        togglePlaying={togglePlaying}\r\n        cellSize={cellSize}\r\n        setCellSize={setCellSize}\r\n        playSpeed={playSpeed}\r\n        setPlaySpeed={setPlaySpeed}\r\n        generation={generation}\r\n        randomizeBoard={randomizeBoard}\r\n        clearBoard={clearBoard}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Gameboard;\r\n","const IntroModal = () => {\r\n  return (\r\n    <div id=\"introModal\" class=\"modal\" style={{ display: \"block\" }}>\r\n      <div class=\"modal-content\">\r\n        <div class=\"modal-header\">\r\n          <span\r\n            class=\"close\"\r\n            onClick={() => {\r\n              document.getElementById(\"introModal\").style.display = \"none\";\r\n            }}\r\n          >\r\n            &times;\r\n          </span>\r\n          <h2>Welcome</h2>\r\n        </div>\r\n        <div class=\"modal-body\">\r\n          <p>\r\n            This is an interactive version of John Conway's Game of Life made\r\n            by&nbsp;\r\n            <a\r\n              href=\"https://www.linkedin.com/in/spencerkeene/\"\r\n              target={\"_blank\"}\r\n              rel=\"noreferrer\"\r\n            >\r\n              Spencer Keene\r\n            </a>\r\n            .\r\n          </p>\r\n          <p>\r\n            To learn how the game works checkout my{\" \"}\r\n            <a\r\n              href=\"https://github.com/SpencerKeene/React-Conways-Game-of-Life/blob/main/README.md\"\r\n              target={\"_blank\"}\r\n              rel=\"noreferrer\"\r\n            >\r\n              README\r\n            </a>\r\n            .\r\n          </p>\r\n          <p>\r\n            To learn about the Game of Life, visit the Game of Life&nbsp;\r\n            <a\r\n              href=\"https://en.wikipedia.org/wiki/Conway%27s_Game_of_Life\"\r\n              target={\"_blank\"}\r\n              rel=\"noreferrer\"\r\n            >\r\n              Wikipedia page\r\n            </a>\r\n            .\r\n          </p>\r\n          <p>Try to make some interesting patterns and enjoy!</p>\r\n          <h3>Instrctions</h3>\r\n          <p>To move around the board, simply click and drag.</p>\r\n          <p>\r\n            To draw on the board and either bring a cell to life or kill it,\r\n            hold SHIFT while clicking on a cell. You can hold down on the mouse\r\n            while moving it around to continue adding or removing cells\r\n            (depending on what cell you clicked on first).\r\n          </p>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default IntroModal;\r\n","import \"./App.css\";\r\nimport Gameboard from \"./components/Gameboard.js\";\r\nimport IntroModal from \"./components/IntroModal.js\";\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <Gameboard />\r\n      <IntroModal />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = (onPerfEntry) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport reportWebVitals from \"./reportWebVitals\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}